function c = PresudoGenerator(c_init, N)
    % PresudoGenerator  Generate pseudo-random (Gold) sequence according to 3GPP
    %
    %   c_init : initialization seed (depends on CellID, RNTI, slot index, etc.)
    %   N      : number of output bits required
    %
    % Reference:
    %   The pseudo-random sequence is defined by a length-31 Gold sequence:
    %
    %       c(n) = ( x1(n + Nc) + x2(n + Nc) ) mod 2
    %
    %   where Nc = 1600, and x1, x2 are m-sequences generated by:
    %
    %       x1(n+31) = ( x1(n+3) + x1(n) ) mod 2
    %       x2(n+31) = ( x2(n+3) + x2(n+2) + x2(n+1) + x2(n) ) mod 2
    %
    %   Initial states:
    %       x1(0) = 1, x1(1..30) = 0
    %       x2(0..30) = binary representation of c_init

    %-----------------------------------------
    % 1. Initialize 2 shift registers of length 31
    %    x1: fixed init (only first bit = 1)
    %    x2: loaded from seed c_init
    %-----------------------------------------
    x1 = zeros(1, 31); 
    x2 = zeros(1, 31);
    x1(1) = 1;

    % Load c_init into x2 (LSB first)
    for i = 1:31
        x2(i) = bitget(c_init, i);
    end

    %-----------------------------------------
    % 2. Generate L = N + 1600 bits
    %    (first 1600 bits are discarded as per 3GPP)
    %-----------------------------------------
    L = N + 1600;
    seq = zeros(L,1);

    %-----------------------------------------
    % 3. Generate sequences
    %    Output: seq(n) = x1(1) XOR x2(1)
    %
    %    Update rules:
    %       new_x1 = ( x1(1) + x1(4) ) mod 2
    %       new_x2 = ( x2(1) + x2(2) + x2(3) + x2(4) ) mod 2
    %-----------------------------------------
    for n = 1:L
        % Gold sequence output
        seq(n) = xor(x1(1), x2(1));

        % Feedback computation
        new_x1 = xor(x1(1), x1(4));
        new_x2 = xor(xor(x2(4), x2(3)), xor(x2(2), x2(1)));

        % Shift right and append new bits
        x1 = [x1(2:end), new_x1];
        x2 = [x2(2:end), new_x2];
    end

    %-----------------------------------------
    % 4. Discard the first 1600 bits â†’ output N bits
    %-----------------------------------------
    c = logical(seq(1601:end));
end
